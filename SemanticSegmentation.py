# -*- coding: utf-8 -*-
"""PR2Part3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v-T_e0ZDk37dwBPG3j5gU8mWm-dkhoCl

**Imports**
"""

import torch
from torchvision.models.segmentation import fcn_resnet50
from torchvision.transforms import functional as F
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
from google.colab import drive

"""**Define Model**"""

model = fcn_resnet50(pretrained=True).eval()

"""**Initialize Image Models**"""

image_files = ['/content/images/im1.jpg', '/content/images/im2.jpg', '/content/images/im3.jpg', '/content/images/im4.jpg', '/content/images/im5.jpg']

"""**Process each image and display feature maps and segmentation**"""

for image_file in image_files:
    # Load image from file
    path_list = image_file.split('.')
    split_path = path_list[0].split('/')

    image = Image.open(image_file).convert("RGB")

    # Preprocess the image
    input_tensor = F.to_tensor(image).unsqueeze(0)

    # Forward pass through the model
    with torch.no_grad():
        output = model(input_tensor)['out']

    # Save all the feature maps (not segmentations) in 1 image (as tiles)
    feature_maps = output[0].detach().cpu().numpy()
    # Assuming feature_maps shape is (21, H, W), where H and W are the height and width of the feature maps
    tiled_feature_maps = np.concatenate(feature_maps, axis=1)

     # Display the original image
    plt.imshow(np.array(image))
    plt.axis('off')
    plt.title("Original Image")
    plt.show()

    # Display feature maps
    plt.imshow(tiled_feature_maps, cmap='viridis')
    plt.axis('off')
    plt.title("Feature Maps")
    plt.show()

    # Create the final segmentation image
    _, predicted = torch.max(output, 1)
    segmentation = predicted[0].detach().cpu().numpy()

    # Display segmentation
    plt.imshow(segmentation)
    plt.axis('off')
    plt.title("Semantic Mask")
    plt.show()

    # Save images
    plt.imsave('/' + split_path[1] + '/featuremaps/' + split_path[3] + '_feature_map.' + path_list[1], tiled_feature_maps)
    plt.imsave('/' + split_path[1] + '/segmentations/' + split_path[3] + '_segmentation.' + path_list[1], segmentation)